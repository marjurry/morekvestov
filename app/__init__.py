import os
import psycopg2
from pathlib import Path
from sqlalchemy import create_engine, MetaData, text, Boolean
from sqlalchemy.orm import sessionmaker
from app import models
from app.database import Base, engine
from app.crud import *
import random
from typing import List, Dict, Any
from dotenv import load_dotenv
from alembic.config import Config
from alembic import command



from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker


DATABASE_URL = "postgresql://postgres:postgres@postgres:5432/quest_app"

try:
    engine = create_engine(DATABASE_URL)
    connection = engine.connect()
    TestingSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
    print("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!")

except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
def apply_migrations():
    """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –≤—Å–µ pending –º–∏–≥—Ä–∞—Ü–∏–∏ Alembic"""
    try:
        base_dir = Path(__file__).resolve().parent
        alembic_cfg = Config(os.path.join(base_dir, "alembic.ini"))
        
        print("üîÑ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π...")
        command.upgrade(alembic_cfg, "head")
        print("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã!")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–π: {e}")
        raise

def ensure_tables_exist():
    """–ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ —Ç–∞–±–ª–∏—Ü—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        print("üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü...")
        Base.metadata.create_all(bind=engine)
        print("‚úÖ –¢–∞–±–ª–∏—Ü—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã/–ø—Ä–æ–≤–µ—Ä–µ–Ω—ã")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü: {e}")
        raise

def create_tables_if_not_exist():
    """–°–æ–∑–¥–∞—ë—Ç —Ç–∞–±–ª–∏—Ü—ã –Ω–∞–ø—Ä—è–º—É—é (–µ—Å–ª–∏ Alembic –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)"""
    try:
        print("üîÑ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü...")
        Base.metadata.create_all(bind=engine)
        print("‚úÖ –¢–∞–±–ª–∏—Ü—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã!")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü: {e}")
        raise

def init_db(use_alembic: bool = True):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    if use_alembic:
        apply_migrations()
    else:
        create_tables_if_not_exist()
    
    ensure_tables_exist()

#def clear_db():
   # """–û—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
   # print("‚ö†Ô∏è –û—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    #Base.metadata.drop_all(bind=engine)
  #  print("üóëÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω–∞")

def clear_database_tables():
    
    # 2. –°–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ (–≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ)
    tables = [
    '"quest_challenge_association"',
    '"Challenge"',
    '"Quest"',
    '"AgeGroup"',
    '"User"'
    ]
    
    # 3. –í—ã–ø–æ–ª–Ω—è–µ–º –æ—á–∏—Å—Ç–∫—É
    with engine.connect() as connection:
        # –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
        connection.execute(text("SET session_replication_role = 'replica'"))
        
        # –û—á–∏—â–∞–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –æ–¥–Ω–æ–π –∫–æ–º–∞–Ω–¥–æ–π
        truncate_command = f"TRUNCATE TABLE {', '.join(tables)} CASCADE"
        connection.execute(text(truncate_command))
        
        # –í–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –æ–±—Ä–∞—Ç–Ω–æ
        connection.execute(text("SET session_replication_role = 'origin'"))
        connection.commit()
    
    print("‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã")

def populate_test_data(db: Session) -> Dict[str, List]:
    """–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑—ã —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    print("üõ†Ô∏è –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    
    # –°–æ–∑–¥–∞–µ–º –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã–µ –≥—Ä—É–ø–ø—ã
    age_groups = [
        {"id": 1, "name": "–î–µ—Ç–∏", "min_age": 5, "max_age": 12},
        {"id": 2, "name": "–ü–æ–¥—Ä–æ—Å—Ç–∫–∏", "min_age": 13, "max_age": 17},
        {"id": 3, "name": "–í–∑—Ä–æ—Å–ª—ã–µ", "min_age": 18, "max_age": 99}
    ]
    
    created_age_groups = [create_age_group(db, **group) for group in age_groups]
    
    # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    users = [
        {"phone_number": 1234567, "password": "password1"},
        {"phone_number": 7654321, "password": "password2"},
        {"phone_number": 5553535, "password": "securepass123"}
    ]
    
    created_users = [create_user(db, **user) for user in users]
    


# 1. Create challenges
    challenge_types = ["–∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π", "—Ç–≤–æ—Ä—á–µ—Å–∫–∏–π", "—Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–π", "—Å–æ—Ü–∏–∞–ª—å–Ω—ã–π"]
    location_types = ["–¥–æ–º–∞", "–Ω–∞ —É–ª–∏—Ü–µ", "–≤–µ–∑–¥–µ"]

    challenges = []
    challenge_data = [
    {
        "id": 1, 
        "title": "–®–∏—Ñ—Ä",
        "type": random.choice(challenge_types),
        "location_type": random.choice(location_types),
        "duration_min": random.randint(5, 60),
        "age_group_id": random.choice([g.id for g in created_age_groups]),
        "rules": "–ü–æ–¥—Ä–æ–±–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è —á–µ–ª–ª–µ–Ω–¥–∂–∞ 1",
    },
    {
        "id": 2, 
        "title": "–ö–≤–∏–∑",
        "type": random.choice(challenge_types),
        "location_type": random.choice(location_types),
        "duration_min": random.randint(5, 60),
        "age_group_id": random.choice([g.id for g in created_age_groups]),
        "rules": "–ü–æ–¥—Ä–æ–±–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è —á–µ–ª–ª–µ–Ω–¥–∂–∞ 2"
    },
    {
        "id": 3, 
        "title": "–ü—Ä—è—Ç–∫–∏",
        "type": random.choice(challenge_types),
        "location_type": random.choice(location_types),
        "duration_min": random.randint(5, 60),
        "age_group_id": random.choice([g.id for g in created_age_groups]),
        "rules": "–ü–æ–¥—Ä–æ–±–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è —á–µ–ª–ª–µ–Ω–¥–∂–∞ 3"
    },
    {
        "id": 4, 
        "title": "–î–æ–≥–æ–Ω—è–ª–∫–∏",
        "type": random.choice(challenge_types),
        "location_type": random.choice(location_types),
        "duration_min": random.randint(5, 60),
        "age_group_id": random.choice([g.id for g in created_age_groups]),
        "rules": "–ü–æ–¥—Ä–æ–±–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è —á–µ–ª–ª–µ–Ω–¥–∂–∞ 4"
    }
]

# Create challenges and save real objects
    for data in challenge_data:
        challenge = create_challenge(db, **data)
        challenges.append(challenge)

    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(challenges)} —á–µ–ª–ª–µ–Ω–¥–∂–µ–π")

# 2. Create quests
    quests = []
    quest_data = [
    {
        "id": 1,
        "user_id": created_users[0].phone_number,  # Using existing user
        "total_duration": random.randint(30, 180),
        "location_type": random.choice(location_types),
        "age_group_id": random.choice([g.id for g in created_age_groups]),
        "challenge_ids": [challenges[0].id, challenges[1].id]  # Pre-selected challenges
    },
    {
        "id": 2,
        "user_id": created_users[1].phone_number if len(created_users) > 1 else created_users[0].phone_number,
        "total_duration": random.randint(30, 180),
        "location_type": random.choice(location_types),
        "age_group_id": random.choice([g.id for g in created_age_groups]),
        "challenge_ids": [challenges[2].id]  # Pre-selected challenges
    }
    ]

# Create quests with challenges
    for data in quest_data:
    # Extract challenge_ids if present
        challenge_ids = data.pop("challenge_ids", [])
    
    # Create quest
        quest = create_quest(db, **data)
    
    # Add challenges to quest
        if challenge_ids:
            set_quest_challenges(db, quest.id, challenge_ids)
            print(f"‚û°Ô∏è –î–æ–±–∞–≤–ª–µ–Ω—ã —á–µ–ª–ª–µ–Ω–¥–∂–∏ {challenge_ids} –≤ –∫–≤–µ—Å—Ç {quest.id}")
    
        quests.append(quest)
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω –∫–≤–µ—Å—Ç ID: {quest.id}")

# 3. Optionally add random challenges to some quests
    for quest in quests:
        if random.choice([True, False]):  # 50% chance to add more challenges
            available_challenges = [c for c in challenges if c.id not in [ch.id for ch in quest.challenges]]
            if available_challenges:
                challenge_to_add = random.choice(available_challenges)
                add_challenge_to_quest(db, quest.id, challenge_to_add.id)
                print(f"‚û°Ô∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω —á–µ–ª–ª–µ–Ω–¥–∂ {challenge_to_add.id} –≤ –∫–≤–µ—Å—Ç {quest.id}")

    print(f"‚úÖ –í—Å–µ–≥–æ —Å–æ–∑–¥–∞–Ω–æ {len(quests)} –∫–≤–µ—Å—Ç–æ–≤")
    print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã")

    return {
    "users": created_users,
    "age_groups": created_age_groups,
    "challenges": challenges,
    "quests": quests
    }

def test_user_crud(db: Session, test_user: models.User):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ CRUD –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    print("\n=== –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô ===")
    
    # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è
    new_user = create_user(db, phone_number=9998877, password="newuserpass")
    print(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {new_user.phone_number}")
    
    # –¢–µ—Å—Ç —á—Ç–µ–Ω–∏—è
    db_user = get_user(db, test_user.phone_number)
    print(f"–ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {db_user.phone_number if db_user else '–Ω–µ –Ω–∞–π–¥–µ–Ω'}")
    
    # –¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    #updated_user = update_user(db, test_user.phone_number, {"phone_number": 12243})
    #print(f"–û–±–Ω–æ–≤–ª–µ–Ω –Ω–æ–º–µ—Ä: {test_user.phone_number} -> {updated_user.phone_number}")
    
    # –¢–µ—Å—Ç —É–¥–∞–ª–µ–Ω–∏—è
    if delete_user(db, new_user.phone_number):
        print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {new_user.phone_number} —É–¥–∞–ª–µ–Ω")

def test_age_group_crud(db: Session, test_age_group: models.AgeGroup):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ CRUD –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã—Ö –≥—Ä—É–ø–ø"""
    print("\n=== –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –í–û–ó–†–ê–°–¢–ù–´–• –ì–†–£–ü–ü ===")
    
    # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è
    new_group = create_age_group(db, id=4, name="–ù–æ–≤–∞—è –≥—Ä—É–ø–ø–∞", min_age=25, max_age=40)
    print(f"–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –≤–æ–∑—Ä–∞—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞: {new_group.name}")
    
    # –¢–µ—Å—Ç —á—Ç–µ–Ω–∏—è
    db_group = get_age_group(db, test_age_group.id)
    print(f"–ù–∞–π–¥–µ–Ω–∞ –≥—Ä—É–ø–ø–∞: {db_group.name if db_group else '–Ω–µ –Ω–∞–π–¥–µ–Ω–∞'}")
    
    # –¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    updated_group = update_age_group(db, new_group.id, {"name": "–û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≥—Ä—É–ø–ø–∞", "max_age": 50})
    print(f"–û–±–Ω–æ–≤–ª–µ–Ω–∞ –≥—Ä—É–ø–ø–∞: ID {updated_group.id}, –Ω–æ–≤–æ–µ –∏–º—è: {updated_group.name}")
    
    # –¢–µ—Å—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    suitable_groups = get_age_groups_by_age(db, age=15)
    print(f"–ì—Ä—É–ø–ø—ã –¥–ª—è –≤–æ–∑—Ä–∞—Å—Ç–∞ 15: {[g.name for g in suitable_groups]}")
    
    # –¢–µ—Å—Ç —É–¥–∞–ª–µ–Ω–∏—è
    if delete_age_group(db, new_group.id):
        print(f"–ì—Ä—É–ø–ø–∞ {new_group.name} —É–¥–∞–ª–µ–Ω–∞")

def test_challenge_crud(db: Session, test_challenge: models.Challenge):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ CRUD –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è —á–µ–ª–ª–µ–Ω–¥–∂–µ–π"""
    print("\n=== –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ß–ï–õ–õ–ï–ù–î–ñ–ï–ô ===")
    
    # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è
    new_challenge = create_challenge(
        db,
        id=6,
        title="–ù–æ–≤—ã–π —á–µ–ª–ª–µ–Ω–¥–∂",
        type="—Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–π",
        location_type="–Ω–∞ —É–ª–∏—Ü–µ",
        duration_min=30,
        age_group_id=test_challenge.age_group_id,
        rules="–ù–æ–≤—ã–µ –ø—Ä–∞–≤–∏–ª–∞"
    )
    print(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —á–µ–ª–ª–µ–Ω–¥–∂: {new_challenge.title}")
    
    # –¢–µ—Å—Ç —á—Ç–µ–Ω–∏—è
    db_challenge = get_challenge(db, test_challenge.id)
    print(f"–ù–∞–π–¥–µ–Ω —á–µ–ª–ª–µ–Ω–¥–∂: {db_challenge.title if db_challenge else '–Ω–µ –Ω–∞–π–¥–µ–Ω'}")
    
    # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∫–≤–µ—Å—Ç–æ–≤
    challenge_quests = get_challenge_quests(db, test_challenge.id)
    print(f"–ß–µ–ª–ª–µ–Ω–¥–∂ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –∫–≤–µ—Å—Ç–∞—Ö: {len(challenge_quests)}")
    
    # –¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    updated_challenge = update_challenge(db, new_challenge.id, {"title": "–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —á–µ–ª–ª–µ–Ω–¥–∂", "duration_min": 45})
    print(f"–û–±–Ω–æ–≤–ª–µ–Ω —á–µ–ª–ª–µ–Ω–¥–∂: {updated_challenge.title}, –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {updated_challenge.duration_min} –º–∏–Ω")
    
    # –¢–µ—Å—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    filtered_challenges = get_challenges_by_filters(
        db,
        age_group_id=test_challenge.age_group_id,
        challenge_type=test_challenge.type,
        location_type=test_challenge.location_type
    )
    print(f"–ù–∞–π–¥–µ–Ω–æ —á–µ–ª–ª–µ–Ω–¥–∂–µ–π –ø–æ —Ñ–∏–ª—å—Ç—Ä—É: {len(filtered_challenges)}")
    
    # –¢–µ—Å—Ç —É–¥–∞–ª–µ–Ω–∏—è (–ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Å–∫–∞–¥–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Å–≤—è–∑–µ–π)
    if delete_challenge(db, new_challenge.id):
        print(f"–ß–µ–ª–ª–µ–Ω–¥–∂ {new_challenge.title} —É–¥–∞–ª–µ–Ω")
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–≤—è–∑–∏ —É–¥–∞–ª–∏–ª–∏—Å—å
        remaining_quests = get_challenge_quests(db, new_challenge.id)
        #print(f"–û—Å—Ç–∞–ª–æ—Å—å —Å–≤—è–∑–µ–π —Å –∫–≤–µ—Å—Ç–∞–º–∏: {len(remaining_quests)} (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 0)")

def test_quest_crud(db: Session, test_quest: models.Quest, test_challenges: List[models.Challenge]):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ CRUD –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è –∫–≤–µ—Å—Ç–æ–≤"""
    print("\n=== –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ö–í–ï–°–¢–û–í ===")
    
    # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Å —Å—Ä–∞–∑—É –∑–∞–¥–∞–Ω–Ω—ã–º–∏ —á–µ–ª–ª–µ–Ω–¥–∂–∞–º–∏
    new_quest = create_quest(
        db,
        id=5,
        user_id=test_quest.user_id,
        total_duration=90,
        location_type="–≤–µ–∑–¥–µ",
        age_group_id=test_quest.age_group_id
    )
    print(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –∫–≤–µ—Å—Ç: ID {new_quest.id}")
    
    # –î–æ–±–∞–≤–ª—è–µ–º —á–µ–ª–ª–µ–Ω–¥–∂–∏ (3 —Å–ª—É—á–∞–π–Ω—ã—Ö)
    selected_challenges = random.sample(test_challenges, min(3, len(test_challenges)))
    for challenge in selected_challenges:
        add_challenge_to_quest(db, new_quest.id, challenge.id)
    print(f"–î–æ–±–∞–≤–ª–µ–Ω–æ —á–µ–ª–ª–µ–Ω–¥–∂–µ–π –≤ –∫–≤–µ—Å—Ç: {len(selected_challenges)}")
    
    # –¢–µ—Å—Ç —á—Ç–µ–Ω–∏—è
    db_quest = get_quest(db, test_quest.id)
    print(f"–ù–∞–π–¥–µ–Ω –∫–≤–µ—Å—Ç: ID {db_quest.id if db_quest else '–Ω–µ –Ω–∞–π–¥–µ–Ω'}")
    
    # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —á–µ–ª–ª–µ–Ω–¥–∂–µ–π
    quest_challenges = get_quest_challenges(db, new_quest.id)
    print(f"–ö–≤–µ—Å—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç —á–µ–ª–ª–µ–Ω–¥–∂–µ–π: {len(quest_challenges)}")
    if hasattr(new_quest, 'challenges') and new_quest.challenges:
        print("\n–ß–µ–ª–ª–µ–Ω–¥–∂–∏:")
        for challenge in new_quest.challenges:
            print(f"- {challenge.title} (ID: {challenge.id})")
    
    # –¢–µ—Å—Ç –º–∞—Å—Å–æ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —á–µ–ª–ª–µ–Ω–¥–∂–µ–π
    if len(test_challenges) > 1:
        new_challenge_ids = [test_challenges[0].id, test_challenges[-1].id]
        set_quest_challenges(db, new_quest.id, new_challenge_ids)
        updated_challenges = get_quest_challenges(db, new_quest.id)
        print(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ —á–µ–ª–ª–µ–Ω–¥–∂–µ–π –≤ –∫–≤–µ—Å—Ç–µ: {len(updated_challenges)}")
    
    # –¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∫–≤–µ—Å—Ç–∞
    updated_quest = update_quest(db, new_quest.id, {"total_duration": 120})
    print(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ –≤—Ä–µ–º—è –∫–≤–µ—Å—Ç–∞: {updated_quest.total_duration} –º–∏–Ω")
    
    # –¢–µ—Å—Ç —É–¥–∞–ª–µ–Ω–∏—è —á–µ–ª–ª–µ–Ω–¥–∂–∞ –∏–∑ –∫–≤–µ—Å—Ç–∞
    if quest_challenges:
        removed = remove_challenge_from_quest(db, new_quest.id, quest_challenges[0].id)
        print(f"–ß–µ–ª–ª–µ–Ω–¥–∂ —É–¥–∞–ª–µ–Ω –∏–∑ –∫–≤–µ—Å—Ç–∞: {'—É—Å–ø–µ—à–Ω–æ' if removed else '–æ—à–∏–±–∫–∞'}")
    
    # –¢–µ—Å—Ç —É–¥–∞–ª–µ–Ω–∏—è –∫–≤–µ—Å—Ç–∞ (–ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Å–∫–∞–¥–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Å–≤—è–∑–µ–π)
    if delete_quest(db, new_quest.id):
        print(f"–ö–≤–µ—Å—Ç ID {new_quest.id} —É–¥–∞–ª–µ–Ω")
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–≤—è–∑–∏ —É–¥–∞–ª–∏–ª–∏—Å—å
        remaining_challenges = get_quest_challenges(db, new_quest.id)
        

def run_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    db = TestingSessionLocal()
    
    try:
        clear_database_tables()
        init_db()
        
        test_data = populate_test_data(db)
        
        test_user_crud(db, test_data["users"][1])
        test_age_group_crud(db, test_data["age_groups"][2])
        test_challenge_crud(db, test_data["challenges"][1])
        test_quest_crud(db, test_data["quests"][0], test_data["challenges"])
        
        print("\n‚úÖ –í–°–ï –¢–ï–°–¢–´ –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù–´")
    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê: {str(e)}")
    finally:
        db.close()

if __name__ == "__main__":
    run_tests()